"What is the difference between var, let, and const?","var: function-scoped, hoisted (initialized with undefined); let: block-scoped, not hoisted; const: block-scoped, read-only (cannot be reassigned)"
"What is a closure?","A closure is a function that retains access to its lexical scope even when the function is executed outside of that scope."
"What is the difference between == and ===?","==: compares values after type coercion; ===: compares values and types (strict equality)"
"What is event delegation in JavaScript?","Event delegation is a technique of handling events at a higher level in the DOM rather than on each element. It uses event bubbling."
"Explain the event loop.","JavaScript runs on a single thread and uses an event loop to manage async operations. Tasks go through: Call Stack, Web APIs, Callback Queue, Event Loop."
"What are Promises and async/await?","A Promise is an object representing the eventual completion of an async operation. async/await is syntactic sugar for Promises, making async code easier to write/read."
"What is hoisting?","Hoisting is JavaScript's default behavior of moving declarations to the top of their scope before code execution. var is hoisted with value undefined, but let and const are not initialized."
"Explain prototypal inheritance.","JavaScript objects can inherit from other objects via the prototype chain. obj.__proto__ points to its prototype."
"What are higher-order functions?","Functions that take other functions as arguments or return them. Examples: map, filter, reduce."
"What is the difference between call(), apply(), and bind()?","call: calls function with this and individual args; apply: same, but with args as array; bind: returns a new function with bound this"
"What is the this keyword?","this refers to the execution context. Its value depends on how a function is called: Global context: window; Object method: the object; Arrow functions: lexically bound."
"Difference between shallow copy and deep copy?","Shallow copy copies object references (Object.assign, spread); Deep copy duplicates all levels (structuredClone, or JSON.parse(JSON.stringify(...)))."
"What are arrow functions and how are they different?","Arrow functions do not have their own this, arguments, or super. They're shorter and lexically bind this."
"How do you handle immutability in JavaScript?","Using spread syntax, Object.freeze, or libraries like Immer."
"What are modules in JavaScript?","Modules allow code reuse and separation. ES6 uses import/export."
"What is the difference between null and undefined?","null: intentional absence of value; undefined: variable declared but not assigned."
"What is the difference between synchronous and asynchronous code?","Synchronous code blocks execution; async code (like setTimeout, Promises) allows non-blocking behavior."
"What are template literals?","Template literals allow embedded expressions and multiline strings using backticks (`)."
"How does the 'typeof' operator work?","Returns a string indicating the type of the operand."
"How do you handle errors in JavaScript?","Use try/catch blocks or catch() with Promises. Use finally for cleanup."
"What is destructuring?","A concise way to extract values from arrays or objects."
"What are JavaScript data types?","Primitive: string, number, bigint, boolean, undefined, symbol, null; Non-primitive: object, array, function."
"What is a promise chain?","A series of .then() calls on a Promise to handle async steps in sequence."
"What is debounce and throttle?","Both control function execution rate: Debounce waits for pause; Throttle runs at intervals. Useful for scroll/input events."
"What are Map and Set?","Map stores key-value pairs, preserves insertion order. Set stores unique values only."
"What is object destructuring with default values?","Assign values with fallback."
"How do JavaScript arrays work internally?","Arrays are objects with numeric keys. JS engines optimize them for performance, but sparse arrays can be slower."
"What is the difference between forEach and map?","forEach: executes for side-effects, returns undefined; map: returns a new array."
"How can you clone an object in JavaScript?","Use spread {...obj}, Object.assign, or structuredClone for deep copy."
"What are Immediately Invoked Function Expressions (IIFE)?","Functions that run as soon as they are defined."
"What is a generator function and the yield keyword?","Generator functions, declared with function*, return iterators. The yield keyword pauses the function and returns a value. You can resume execution with .next()."
"What is the Symbol type and how is it used?","Symbol creates unique identifiers, often used as object property keys to avoid collisions."
"How do you use the spread operator in function calls?","The spread operator ... expands an iterable into individual arguments, e.g., Math.max(...nums)."
"What is the rest parameter syntax in functions?","Rest parameters collect remaining arguments into an array, using ... syntax in function definitions."
"What is the difference between Map and Object for key-value storage?","Map allows any value as keys, preserves insertion order, and has a size property; Objects only allow string or symbol keys and inherit from prototypes."
"What are WeakMap and WeakSet?","WeakMap and WeakSet hold weak references to objects, preventing memory leaks. They are not iterable and do not prevent garbage collection."
"What is optional chaining (?.) and how does it work?","Optional chaining obj?.prop safely accesses nested properties, returning undefined if any reference is null or undefined."
"What is the nullish coalescing operator (??) and how does it work?","a ?? b returns a if it is not null or undefined; otherwise, it returns b."
"How do you iterate over object properties?","Use Object.keys(), Object.values(), Object.entries(), or for...in with hasOwnProperty checks."
"What is the purpose of Object.freeze()?","Object.freeze(obj) prevents adding, deleting, or changing properties of obj."
"What is the purpose of Object.assign()?","Object.assign(target, ...sources) copies enumerable own properties from sources to the target object."
"How does prototypal inheritance differ from classical inheritance?","Prototypal inheritance uses object prototypes linked via __proto__; classical inheritance defines classes and subclasses, with ES6 classes as syntax sugar."
"How do ES6 classes work compared to constructor functions?","ES6 class syntax provides clearer syntax for constructors and methods but under the hood uses prototypal inheritance similar to constructor functions."
"What is a Proxy object and what is it used for?","new Proxy(target, handler) lets you intercept and customize operations like property lookup, assignment, and function calls on the target object."
"What is the Reflect API?","Reflect provides methods corresponding to proxy handlers (e.g., Reflect.get, Reflect.set) for default behavior and meta-programming."
"What is tail call optimization?","Tail call optimization reuses the current stack frame for function calls in tail position, preventing stack overflows in recursive functions."
"What are microtasks and macrotasks in the event loop?","Macrotasks (e.g., setTimeout) execute in the task queue; microtasks (e.g., Promises) execute in the microtask queue after the current task but before the next one."
"What is the difference between setTimeout(fn, 0) and Promise.resolve().then(fn)?","setTimeout(fn, 0) schedules a macrotask, while Promise.resolve().then(fn) schedules a microtask, which runs sooner."
"How can you detect the type of an object in JavaScript?","Use typeof for primitives, Array.isArray() for arrays, instanceof for class instances, or Object.prototype.toString.call(obj) for precise types."
"Explain event bubbling and event capturing in the DOM?","Event capturing propagates events from the document root down to the target; bubbling propagates from the target up to the root. Use addEventListener with the third capture argument to specify the phase."