"What is Node.js and why is it used?","Node.js is a runtime environment that executes JavaScript code on the server side. It's built on Chrome's V8 engine and is ideal for building scalable, event-driven applications like APIs and real-time apps."
"How does the event loop work in Node.js?","The event loop is a single-threaded mechanism that handles async callbacks using a queue. It allows non-blocking I/O operations by offloading tasks to the event loop and worker threads when needed."
"Is Node.js single-threaded? How does it handle concurrency?","Yes, Node.js uses a single-threaded event loop for I/O, but it can handle concurrency via asynchronous callbacks and the internal thread pool (libuv) for CPU-bound or blocking operations."
"What are the differences between process.nextTick(), setImmediate(), and setTimeout()?","process.nextTick() queues a callback to run before the next event loop tick; setImmediate() runs a callback after I/O events in the current loop; setTimeout() runs after a minimum delay, not precisely timed."
"What are CommonJS and ES Modules in Node.js?","CommonJS uses require() and module.exports (default in Node); ES Modules (ESM) use import and export, and are supported with 'type': 'module' in package.json."
"How do you handle environment variables in Node.js?","Using the dotenv package to load .env files. Access variables via process.env. This keeps credentials and config secure and separate from code."
"How do you manage asynchronous code in Node.js?","Use async/await, Promises, or callbacks. async/await is preferred for readability and error handling using try/catch."
"How does Node.js handle errors?","Node handles sync errors via try/catch. For async code, use .catch() or try/catch with async/await. Also, add global error handling via process.on('uncaughtException') and process.on('unhandledRejection')."
"What is middleware in Node.js (especially in Express)?","Middleware functions have access to req, res, and next. They're used to handle tasks like logging, parsing, auth, and routing before reaching the final request handler."
"What is the difference between require() and import?","require() is used in CommonJS modules (synchronous), while import is used in ES Modules (asynchronous, top-level only). Node supports both with configuration."
"How do you ensure scalability in a Node.js application?","Use clustering to run on multiple CPU cores, use load balancers, leverage caching (Redis), optimize I/O and DB calls, and use message queues for background tasks."
"How do you test a Node.js application?","Use testing frameworks like Jest, Mocha, Chai, or Supertest for APIs. Focus on unit, integration, and E2E testing, mocking dependencies when necessary."
"How do you handle CORS in Node.js?","Use the cors middleware in Express. Configure allowed origins, methods, headers, and credentials support as needed."
"What are best practices for securing a Node.js app?","Sanitize user inputs to prevent injection, use HTTPS, set security headers (Helmet), implement auth (OAuth, JWT), limit rate requests (rate-limiter), keep dependencies updated."
"How does Node.js handle file uploads and streams?","Use multer for file uploads in Express. Use Node.js streams (fs.createReadStream) for efficient processing of large files without loading them entirely in memory."
"What is the fs module used for?","The fs module allows interaction with the file systemâ€”reading, writing, and modifying files and directories."
"How does clustering work in Node.js?","Clustering allows multiple instances of Node.js to run on different cores, sharing the same server port using the cluster module."
"What is the purpose of the crypto module?","The crypto module provides cryptographic functionality like hashing (SHA256), encryption, and signing."
"How do you connect Node.js with a database?","Use drivers or ORMs like mongoose (MongoDB), pg (PostgreSQL), or Sequelize/Prisma for relational DBs."
"What is an EventEmitter in Node.js?","EventEmitter is a class that lets you create and handle custom events using .on(), .emit(), and .once()."
"What is the package.json file for?","package.json defines project metadata, dependencies, scripts, and config for Node projects."
"What is Express.js and why is it popular?","Express is a minimal and flexible web framework for Node.js that simplifies routing, middleware, and request handling."
"What is the purpose of body-parser?","body-parser is middleware that parses incoming request bodies into req.body (JSON, URL-encoded). Now included in Express 4.16+."
"How do you create an API in Node.js?","Use Express or Fastify. Define endpoints using app.get, app.post, etc., and connect them to controller logic."
"How do you manage processes in Node.js apps?","Use tools like PM2 or nodemon to manage, monitor, and restart Node apps in production or development."
"How do you implement authentication in Node.js?","Use sessions (express-session), cookies, or tokens (JWT). Passport.js helps manage various strategies."
"What is the difference between synchronous and asynchronous methods in Node.js?","Synchronous blocks the thread, while async allows other operations to continue via callbacks, Promises, or async/await."
"How do you implement logging in Node.js?","Use libraries like Winston or pino for structured logging. Console.log is fine for debugging, but not production."
"What are unhandledPromiseRejection and uncaughtException?","Events emitted when a promise is rejected without a .catch() or when an error escapes all try/catch blocks."
"What are some common performance tuning techniques in Node.js?","Avoid synchronous code, use caching, reuse DB connections, use streams, monitor with profiling tools (e.g., Clinic.js)." 