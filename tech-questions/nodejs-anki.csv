"What is Node.js and why is it used?","Node.js is a runtime environment that executes JavaScript code on the server side. It's built on Chrome's V8 engine and is ideal for building scalable, event-driven applications like APIs and real-time apps."
"How does the event loop work in Node.js?","The event loop is a single-threaded mechanism that handles async callbacks using a queue. It allows non-blocking I/O operations by offloading tasks to the event loop and worker threads when needed."
"Is Node.js single-threaded? How does it handle concurrency?","Yes, Node.js uses a single-threaded event loop for I/O, but it can handle concurrency via asynchronous callbacks and the internal thread pool (libuv) for CPU-bound or blocking operations."
"What are the differences between process.nextTick(), setImmediate(), and setTimeout()?","process.nextTick() queues a callback to run before the next event loop tick; setImmediate() runs a callback after I/O events in the current loop; setTimeout() runs after a minimum delay, not precisely timed."
"What are CommonJS and ES Modules in Node.js?","CommonJS uses require() and module.exports (default in Node); ES Modules (ESM) use import and export, and are supported with 'type': 'module' in package.json."
"How do you handle environment variables in Node.js?","Using the dotenv package to load .env files. Access variables via process.env. This keeps credentials and config secure and separate from code."
"How do you manage asynchronous code in Node.js?","Use async/await, Promises, or callbacks. async/await is preferred for readability and error handling using try/catch."
"How does Node.js handle errors?","Node handles sync errors via try/catch. For async code, use .catch() or try/catch with async/await. Also, add global error handling via process.on('uncaughtException') and process.on('unhandledRejection')."
"What is middleware in Node.js (especially in Express)?","Middleware functions have access to req, res, and next. They're used to handle tasks like logging, parsing, auth, and routing before reaching the final request handler."
"What is the difference between require() and import?","require() is used in CommonJS modules (synchronous), while import is used in ES Modules (asynchronous, top-level only). Node supports both with configuration."
"How do you ensure scalability in a Node.js application?","Use clustering to run on multiple CPU cores, use load balancers, leverage caching (Redis), optimize I/O and DB calls, and use message queues for background tasks."
"How do you test a Node.js application?","Use testing frameworks like Jest, Mocha, Chai, or Supertest for APIs. Focus on unit, integration, and E2E testing, mocking dependencies when necessary."
"How do you handle CORS in Node.js?","Use the cors middleware in Express. Configure allowed origins, methods, headers, and credentials support as needed."
"What are best practices for securing a Node.js app?","Sanitize user inputs to prevent injection, use HTTPS, set security headers (Helmet), implement auth (OAuth, JWT), limit rate requests (rate-limiter), keep dependencies updated."
"How does Node.js handle file uploads and streams?","Use multer for file uploads in Express. Use Node.js streams (fs.createReadStream) for efficient processing of large files without loading them entirely in memory."
"What is the fs module used for?","The fs module allows interaction with the file systemâ€”reading, writing, and modifying files and directories."
"How does clustering work in Node.js?","Clustering allows multiple instances of Node.js to run on different cores, sharing the same server port using the cluster module."
"What is the purpose of the crypto module?","The crypto module provides cryptographic functionality like hashing (SHA256), encryption, and signing."
"How do you connect Node.js with a database?","Use drivers or ORMs like mongoose (MongoDB), pg (PostgreSQL), or Sequelize/Prisma for relational DBs."
"What is an EventEmitter in Node.js?","EventEmitter is a class that lets you create and handle custom events using .on(), .emit(), and .once()."
"What is the package.json file for?","package.json defines project metadata, dependencies, scripts, and config for Node projects."
"What is Express.js and why is it popular?","Express is a minimal and flexible web framework for Node.js that simplifies routing, middleware, and request handling."
"What is the purpose of body-parser?","body-parser is middleware that parses incoming request bodies into req.body (JSON, URL-encoded). Now included in Express 4.16+."
"How do you create an API in Node.js?","Use Express or Fastify. Define endpoints using app.get, app.post, etc., and connect them to controller logic."
"How do you manage processes in Node.js apps?","Use tools like PM2 or nodemon to manage, monitor, and restart Node apps in production or development."
"How do you implement authentication in Node.js?","Use sessions (express-session), cookies, or tokens (JWT). Passport.js helps manage various strategies."
"What is the difference between synchronous and asynchronous methods in Node.js?","Synchronous blocks the thread, while async allows other operations to continue via callbacks, Promises, or async/await."
"How do you implement logging in Node.js?","Use libraries like Winston or pino for structured logging. Console.log is fine for debugging, but not production."
"What are unhandledPromiseRejection and uncaughtException?","Events emitted when a promise is rejected without a .catch() or when an error escapes all try/catch blocks."
"What are some common performance tuning techniques in Node.js?","Avoid synchronous code, use caching, reuse DB connections, use streams, monitor with profiling tools (e.g., Clinic.js)."
"What are worker threads and when would you use them?","Worker Threads provide multi-threading via the worker_threads module. Use them for CPU-bound tasks that should not block the event loop."
"What is the difference between child processes and worker threads?","Child processes run in separate processes with their own memory; worker threads run in the same process and share memory."
"How do you spawn child processes in Node.js?","Use child_process.spawn, exec, execFile, or fork to execute external commands or scripts in separate processes."
"What is the Stream API and what stream types exist?","Node.js streams handle streaming data with types: Readable, Writable, Duplex, and Transform streams."
"What is backpressure in streams and how do you handle it?","Backpressure occurs when writable streams cannot process data as fast as produced. Handle it by checking stream.write()'s return value and listening for 'drain' events."
"How do you convert a callback-based function into a Promise?","Use util.promisify(fn) to wrap Node-style callback functions into Promise-based versions."
"How do you make HTTP(S) requests in Node.js without external libraries?","Use the built-in http or https modules: http.get/https.get or http.request/https.request for custom requests."
"How do you create an HTTPS server in Node.js?","Use https.createServer({ key, cert }, requestListener) with SSL/TLS certificates to create a secure server."
"How do you debug Node.js applications?","Use the --inspect or --inspect-brk flags with Chrome DevTools or IDE debuggers to set breakpoints and inspect runtime."
"What is the cluster module and how does it improve scalability?","The cluster module allows spawning worker processes with cluster.fork() that share server ports for multi-core utilization."
"How can you gracefully shut down a Node.js server?","Listen for SIGINT/SIGTERM, call server.close(), stop accepting new connections, and finish pending requests before exiting."
"How do you communicate between processes in Node.js?","Use process.send()/process.on('message') for IPC between parent and child processes, or use sockets/message queues."
"How do you integrate Redis with Node.js?","Use clients like ioredis or node_redis to connect to Redis for caching, pub/sub, and data storage."
"How does module resolution work in Node.js?","Node.js resolves modules by checking core modules, relative/absolute paths, and node_modules directories per the Node module resolution algorithm."
"How do you manage configuration for different environments?","Use environment variables with dotenv or config libraries, load settings based on NODE_ENV, and validate config at startup."
"How do you update and maintain dependency versions safely?","Use tools like npm-check-updates, follow semantic versioning, lock dependencies with package-lock.json or yarn.lock, and test after upgrades."
"What is memory profiling in Node.js and how do you perform it?","Use --inspect with DevTools heap profiler, clinic.js, heapdump, or monitor process.memoryUsage() for profiling and leak detection."
"What are common causes of memory leaks in Node.js?","Unclosed timers, open handles, large caches, global variables, and unremoved event listeners can all lead to memory leaks."
"How can you secure a Node.js application at the process level?","Run as a non-root user, set resource limits, disable inspectors in production, and sanitize inputs to prevent injection attacks."
"How do you deploy a Node.js application to production?","Use process managers (PM2), containerize with Docker, deploy to PaaS or cloud services, implement CI/CD pipelines, and monitor logs and metrics."