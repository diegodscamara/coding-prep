"What is the difference between var, let, and const?","var: function-scoped, hoisted (initialized with undefined); let: block-scoped, not hoisted; const: block-scoped, read-only (cannot be reassigned)"
"What is a closure?","A closure is a function that retains access to its lexical scope even when the function is executed outside of that scope."
"What is the difference between == and ===?","==: compares values after type coercion; ===: compares values and types (strict equality)"
"What is event delegation in JavaScript?","Event delegation is a technique of handling events at a higher level in the DOM rather than on each element. It uses event bubbling."
"Explain the event loop.","JavaScript runs on a single thread and uses an event loop to manage async operations. Tasks go through: Call Stack, Web APIs, Callback Queue, Event Loop."
"What are Promises and async/await?","A Promise is an object representing the eventual completion of an async operation. async/await is syntactic sugar for Promises, making async code easier to write/read."
"What is hoisting?","Hoisting is JavaScript's default behavior of moving declarations to the top of their scope before code execution. var is hoisted with value undefined, but let and const are not initialized."
"Explain prototypal inheritance.","JavaScript objects can inherit from other objects via the prototype chain. obj.__proto__ points to its prototype."
"What are higher-order functions?","Functions that take other functions as arguments or return them. Examples: map, filter, reduce."
"What is the difference between call(), apply(), and bind()?","call: calls function with this and individual args; apply: same, but with args as array; bind: returns a new function with bound this"
"What is the this keyword?","this refers to the execution context. Its value depends on how a function is called: Global context: window; Object method: the object; Arrow functions: lexically bound."
"Difference between shallow copy and deep copy?","Shallow copy copies object references (Object.assign, spread); Deep copy duplicates all levels (structuredClone, or JSON.parse(JSON.stringify(...)))."
"What are arrow functions and how are they different?","Arrow functions do not have their own this, arguments, or super. They're shorter and lexically bind this."
"How do you handle immutability in JavaScript?","Using spread syntax, Object.freeze, or libraries like Immer."
"What are modules in JavaScript?","Modules allow code reuse and separation. ES6 uses import/export."
"What is TypeScript and how is it different from JavaScript?","TypeScript is a superset of JavaScript that adds static typing, interfaces, and better tooling. It compiles to plain JS."
"What are interfaces in TypeScript?","Interfaces define the shape of an object. They support optional properties, readonly modifiers, and extension."
"What is the difference between interface and type?","Both define types, but: interface: extendable, preferred for objects; type: more versatile (e.g., unions, intersections)."
"What are enums in TypeScript?","Enums allow you to define a set of named constants."
"What is type inference?","TypeScript can automatically infer types based on values, reducing the need for explicit annotations."
"What is union and intersection type?","Union (|): one of multiple types; Intersection (&): all combined types."
"What are generics in TypeScript?","Generics allow reusable code with flexible types."
"What is a tuple in TypeScript?","A fixed-length array with defined types for each position."
"What are utility types in TypeScript?","Built-in helpers like Partial<T>, Pick<T, K>, Omit<T, K>, Required<T> for transforming types."
"How does type narrowing work in TypeScript?","Using control flow (typeof, instanceof, in, equality checks) to refine types within blocks."
"What is the unknown type?","A type-safe counterpart to any. Must be narrowed before usage."
"What are type assertions in TypeScript?","You can tell the compiler a value's type using as or angle brackets."
"What are declaration files (.d.ts)?","They describe the shape of JS libraries to TypeScript, enabling type support in JS codebases."
"How does structural typing work in TypeScript?","Type compatibility is based on members' structure rather than explicit declarations (duck typing)."
"What are mapped types in TypeScript?","Mapped types create new types from existing keys." 