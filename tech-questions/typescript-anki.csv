"What is the difference between var, let, and const?","var: function-scoped, hoisted (initialized with undefined); let: block-scoped, not hoisted; const: block-scoped, read-only (cannot be reassigned)"
"What is a closure?","A closure is a function that retains access to its lexical scope even when the function is executed outside of that scope."
"What is the difference between == and ===?","==: compares values after type coercion; ===: compares values and types (strict equality)"
"What is event delegation in JavaScript?","Event delegation is a technique of handling events at a higher level in the DOM rather than on each element. It uses event bubbling."
"Explain the event loop.","JavaScript runs on a single thread and uses an event loop to manage async operations. Tasks go through: Call Stack, Web APIs, Callback Queue, Event Loop."
"What are Promises and async/await?","A Promise is an object representing the eventual completion of an async operation. async/await is syntactic sugar for Promises, making async code easier to write/read."
"What is hoisting?","Hoisting is JavaScript's default behavior of moving declarations to the top of their scope before code execution. var is hoisted with value undefined, but let and const are not initialized."
"Explain prototypal inheritance.","JavaScript objects can inherit from other objects via the prototype chain. obj.__proto__ points to its prototype."
"What are higher-order functions?","Functions that take other functions as arguments or return them. Examples: map, filter, reduce."
"What is the difference between call(), apply(), and bind()?","call: calls function with this and individual args; apply: same, but with args as array; bind: returns a new function with bound this"
"What is the this keyword?","this refers to the execution context. Its value depends on how a function is called: Global context: window; Object method: the object; Arrow functions: lexically bound."
"Difference between shallow copy and deep copy?","Shallow copy copies object references (Object.assign, spread); Deep copy duplicates all levels (structuredClone, or JSON.parse(JSON.stringify(...)))."
"What are arrow functions and how are they different?","Arrow functions do not have their own this, arguments, or super. They're shorter and lexically bind this."
"How do you handle immutability in JavaScript?","Using spread syntax, Object.freeze, or libraries like Immer."
"What are modules in JavaScript?","Modules allow code reuse and separation. ES6 uses import/export."
"What is TypeScript and how is it different from JavaScript?","TypeScript is a superset of JavaScript that adds static typing, interfaces, and better tooling. It compiles to plain JS."
"What are interfaces in TypeScript?","Interfaces define the shape of an object. They support optional properties, readonly modifiers, and extension."
"What is the difference between interface and type?","Both define types, but: interface: extendable, preferred for objects; type: more versatile (e.g., unions, intersections)."
"What are enums in TypeScript?","Enums allow you to define a set of named constants."
"What is type inference?","TypeScript can automatically infer types based on values, reducing the need for explicit annotations."
"What is union and intersection type?","Union (|): one of multiple types; Intersection (&): all combined types."
"What are generics in TypeScript?","Generics allow reusable code with flexible types."
"What is a tuple in TypeScript?","A fixed-length array with defined types for each position."
"What are utility types in TypeScript?","Built-in helpers like Partial<T>, Pick<T, K>, Omit<T, K>, Required<T> for transforming types."
"How does type narrowing work in TypeScript?","Using control flow (typeof, instanceof, in, equality checks) to refine types within blocks."
"What is the unknown type?","A type-safe counterpart to any. Must be narrowed before usage."
"What are type assertions in TypeScript?","You can tell the compiler a value's type using as or angle brackets."
"What are declaration files (.d.ts)?","They describe the shape of JS libraries to TypeScript, enabling type support in JS codebases."
"How does structural typing work in TypeScript?","Type compatibility is based on members' structure rather than explicit declarations (duck typing)."
"What are mapped types in TypeScript?","Mapped types create new types from existing keys."
"What is the 'never' type?","The never type represents values that never occur, such as functions that always throw errors or have infinite loops."
"How do you use the 'keyof' operator?","keyof T produces a union of literal types corresponding to the property keys of type T."
"How do you use the 'typeof' type operator?","In type contexts, typeof x extracts the type of variable x, useful for reflecting existing values."
"What are conditional types?","Conditional types (T extends U ? X : Y) allow selecting one of two types based on a condition."
"How is the 'infer' keyword used in conditional types?","Infer extracts a type variable in conditional types; e.g., type ReturnType<T> = T extends (...args: any[]) => infer R ? R : any."
"What are template literal types?","Template literal types are string literal types constructed via template literal syntax, e.g., type Greeting = `Hello ${string}`;."
"What is the Record<K, T> utility type?","Record<K, T> constructs an object type with keys of type K and values of type T."
"What are the ReturnType and Parameters utility types?","ReturnType<T> extracts the return type of a function type T; Parameters<T> extracts a tuple of parameter types of function T."
"How do you write function overloads in TypeScript?","Provide multiple function signatures above the implementation, and TypeScript resolves calls based on matching signatures."
"What are namespaces and how do they differ from modules?","Namespaces group related types and values in a named scope; modules are file-based and use import/export."
"What are decorators in TypeScript?","Decorators are experimental features to annotate or modify classes and class members using the @decorator syntax."
"What is declaration merging?","Declaration merging allows multiple declarations with the same name to combine their members into a single definition."
"What are abstract classes and how are they used?","Abstract classes cannot be instantiated directly and may contain abstract methods that subclasses must implement."
"What are mixins and how do you implement them?","Mixins are functions that return a class extending a base class, allowing composition of behaviors."
"How do you configure path aliases in tsconfig?","Use compilerOptions.baseUrl and compilerOptions.paths in tsconfig.json to map module paths to custom structures."
"What are key tsconfig options for strict mode?","Options include strict, noImplicitAny, strictNullChecks, strictPropertyInitialization, noImplicitThis, among others."
"What is a type guard and how do you create one?","A type guard is a function returning a boolean that narrows types, declared with x is Type in the return type."
"How do you use the 'as const' assertion?","Adding as const after a literal makes its type a readonly literal type, preserving exact values."
"How do you extend global interfaces like Window?","Use declaration merging: declare global { interface Window { myProp: string; } }."
"What is the difference between @ts-ignore and @ts-expect-error?","@ts-ignore suppresses errors on the next line; @ts-expect-error expects an error and reports if none occurs."