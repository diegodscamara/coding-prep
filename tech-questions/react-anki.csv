"What are the differences between class and functional components?","Class components use ES6 classes and support lifecycle methods (e.g., componentDidMount). Functional components are simpler, use hooks (useState, useEffect), and are now preferred for cleaner, more testable code."
"What are React Hooks, and why are they useful?","Hooks like useState, useEffect, and useContext let you use state and side effects in functional components without classes. They promote reusable, cleaner logic via custom hooks."
"How does state differ from props in React?","Props are passed to components (read-only), while state is managed within a component and can be updated using useState or this.setState."
"What is the virtual DOM and how does React use it?","The virtual DOM is a lightweight copy of the real DOM. React compares it with the previous version (diffing) and updates only the necessary parts (reconciliation) to boost performance."
"Explain the useEffect hook.","useEffect runs side effects like API calls, timers, or subscriptions. It replaces lifecycle methods like componentDidMount, componentDidUpdate, and componentWillUnmount."
"How would you manage global state in a React app?","Options include useContext + useReducer, Redux, Zustand, or Jotai. For larger apps, Redux Toolkit or Zustand offer better scalability and debugging support."
"What are controlled vs uncontrolled components?","Controlled components get their value from React state (useState). Uncontrolled components store data in the DOM and access it via refs (useRef)."
"How do you optimize performance in large React apps?","Use React.memo, useMemo, and useCallback; Lazy load components (React.lazy, Suspense); Code splitting with dynamic imports; Avoid unnecessary re-renders; Virtualize long lists (e.g., react-window)."
"What is context in React and when should you use it?","React.createContext() allows you to pass data deeply without prop drilling. Ideal for theme, auth, or localization data. For complex state, combine with useReducer or external libs."
"What is JSX and how does it work?","JSX is a syntax extension that looks like HTML but compiles to React.createElement() calls. It allows you to write UI in a declarative, component-based way."
"How do you test React components?","Use tools like Jest + React Testing Library. Focus on behavior (user clicks, expected output) rather than implementation (internal states)."
"What is prop drilling and how can you avoid it?","Prop drilling happens when you pass props through many levels unnecessarily. Avoid it using Context API or state management libraries (Redux, Zustand)."
"How do you handle API requests in React?","Use fetch or axios inside useEffect. Manage loading, success, and error states. Use AbortController to cancel requests if needed. Optionally use SWR or React Query for caching."
"What are keys in React and why are they important?","Keys help React identify which items in a list changed, added, or removed. Always use stable, unique keys (preferably IDs) to prevent rendering bugs."
"What happens during React's reconciliation process?","React compares the new virtual DOM with the previous one (diffing). It updates only what's necessary in the real DOM (minimal changes), improving performance."
"What is the difference between useMemo and useCallback?","useMemo memoizes the result of a function, while useCallback memoizes the function itself. Both help prevent unnecessary re-renders."
"How does code splitting work in React?","Code splitting lets you load parts of your app on demand using React.lazy and Suspense. It improves performance by reducing initial bundle size."
"What is React Router and how does it work?","React Router manages client-side navigation using components like <Route>, <Link>, and <BrowserRouter>. It maps URLs to components."
"What are some ways to prevent memory leaks in React?","Clean up effects in useEffect, abort async requests, and remove event listeners or subscriptions during component unmount."
"What is a Higher-Order Component (HOC)?","An HOC is a function that takes a component and returns a new component. It's used for code reuse like authentication or logging."
"How do you handle form validation in React?","Use controlled components and libraries like Formik, React Hook Form, or custom logic to validate inputs and show error messages."
"What is the difference between useLayoutEffect and useEffect?","useLayoutEffect runs synchronously after DOM updates. It's useful for layout reads/writes before the browser paints."
"How can you internationalize a React app?","Use libraries like react-intl or i18next. Wrap your app with a provider and use translation hooks or components for dynamic text."
"How does the useReducer hook work?","useReducer is like Redux in a component. It takes a reducer and initial state, then dispatches actions to update state in a predictable way."
"What is tree shaking and how does it relate to React?","Tree shaking removes unused code from your final bundle. React apps using ES modules and modern bundlers benefit from this optimization."
"How do you implement authentication in a React app?","Store tokens securely (e.g., httpOnly cookies or memory), protect routes, and check auth status with context, state, or libraries like Firebase/Auth0."
"What are some common causes of performance bottlenecks in React?","Too many re-renders, large lists, expensive calculations in render, unnecessary state, and lack of memoization."
"What is React.StrictMode used for?","StrictMode highlights potential issues by intentionally invoking certain lifecycle methods twice in dev mode. It helps enforce best practices."
"What is a custom hook and why would you create one?","A custom hook is a reusable function that uses built-in hooks to encapsulate logic (e.g., useAuth, useForm). It keeps components clean and modular."
"How do you persist state in React apps?","Use localStorage, sessionStorage, or IndexedDB directly or with libraries like redux-persist. Save state on updates and rehydrate on load." 