"What are the differences between class and functional components?","Class components use ES6 classes and support lifecycle methods (e.g., componentDidMount). Functional components are simpler, use hooks (useState, useEffect), and are now preferred for cleaner, more testable code."
"What are React Hooks, and why are they useful?","Hooks like useState, useEffect, and useContext let you use state and side effects in functional components without classes. They promote reusable, cleaner logic via custom hooks."
"How does state differ from props in React?","Props are passed to components (read-only), while state is managed within a component and can be updated using useState or this.setState."
"What is the virtual DOM and how does React use it?","The virtual DOM is a lightweight copy of the real DOM. React compares it with the previous version (diffing) and updates only the necessary parts (reconciliation) to boost performance."
"Explain the useEffect hook.","useEffect runs side effects like API calls, timers, or subscriptions. It replaces lifecycle methods like componentDidMount, componentDidUpdate, and componentWillUnmount."
"How would you manage global state in a React app?","Options include useContext + useReducer, Redux, Zustand, or Jotai. For larger apps, Redux Toolkit or Zustand offer better scalability and debugging support."
"What are controlled vs uncontrolled components?","Controlled components get their value from React state (useState). Uncontrolled components store data in the DOM and access it via refs (useRef)."
"How do you optimize performance in large React apps?","Use React.memo, useMemo, and useCallback; Lazy load components (React.lazy, Suspense); Code splitting with dynamic imports; Avoid unnecessary re-renders; Virtualize long lists (e.g., react-window)."
"What is context in React and when should you use it?","React.createContext() allows you to pass data deeply without prop drilling. Ideal for theme, auth, or localization data. For complex state, combine with useReducer or external libs."
"What is JSX and how does it work?","JSX is a syntax extension that looks like HTML but compiles to React.createElement() calls. It allows you to write UI in a declarative, component-based way."
"How do you test React components?","Use tools like Jest + React Testing Library. Focus on behavior (user clicks, expected output) rather than implementation (internal states)."
"What is prop drilling and how can you avoid it?","Prop drilling happens when you pass props through many levels unnecessarily. Avoid it using Context API or state management libraries (Redux, Zustand)."
"How do you handle API requests in React?","Use fetch or axios inside useEffect. Manage loading, success, and error states. Use AbortController to cancel requests if needed. Optionally use SWR or React Query for caching."
"What are keys in React and why are they important?","Keys help React identify which items in a list changed, added, or removed. Always use stable, unique keys (preferably IDs) to prevent rendering bugs."
"What happens during React's reconciliation process?","React compares the new virtual DOM with the previous one (diffing). It updates only what's necessary in the real DOM (minimal changes), improving performance."
"What is the difference between useMemo and useCallback?","useMemo memoizes the result of a function, while useCallback memoizes the function itself. Both help prevent unnecessary re-renders."
"How does code splitting work in React?","Code splitting lets you load parts of your app on demand using React.lazy and Suspense. It improves performance by reducing initial bundle size."
"What is React Router and how does it work?","React Router manages client-side navigation using components like <Route>, <Link>, and <BrowserRouter>. It maps URLs to components."
"What are some ways to prevent memory leaks in React?","Clean up effects in useEffect, abort async requests, and remove event listeners or subscriptions during component unmount."
"What is a Higher-Order Component (HOC)?","An HOC is a function that takes a component and returns a new component. It's used for code reuse like authentication or logging."
"How do you handle form validation in React?","Use controlled components and libraries like Formik, React Hook Form, or custom logic to validate inputs and show error messages."
"What is the difference between useLayoutEffect and useEffect?","useLayoutEffect runs synchronously after DOM updates. It's useful for layout reads/writes before the browser paints."
"How can you internationalize a React app?","Use libraries like react-intl or i18next. Wrap your app with a provider and use translation hooks or components for dynamic text."
"How does the useReducer hook work?","useReducer is like Redux in a component. It takes a reducer and initial state, then dispatches actions to update state in a predictable way."
"What is tree shaking and how does it relate to React?","Tree shaking removes unused code from your final bundle. React apps using ES modules and modern bundlers benefit from this optimization."
"How do you implement authentication in a React app?","Store tokens securely (e.g., httpOnly cookies or memory), protect routes, and check auth status with context, state, or libraries like Firebase/Auth0."
"What are some common causes of performance bottlenecks in React?","Too many re-renders, large lists, expensive calculations in render, unnecessary state, and lack of memoization."
"What is React.StrictMode used for?","StrictMode highlights potential issues by intentionally invoking certain lifecycle methods twice in dev mode. It helps enforce best practices."
"What is a custom hook and why would you create one?","A custom hook is a reusable function that uses built-in hooks to encapsulate logic (e.g., useAuth, useForm). It keeps components clean and modular."
"How do you persist state in React apps?","Use localStorage, sessionStorage, or IndexedDB directly or with libraries like redux-persist. Save state on updates and rehydrate on load." 
"What is React Fiber and why was it introduced?","React Fiber is the new reconciliation algorithm introduced in React 16. It enables incremental rendering by breaking rendering work into chunks and prioritizing updates for smoother user interactions."
"What is the difference between React and ReactDOM?","React is the core library for building component trees and creating React elements. ReactDOM provides methods like render and hydrate to mount those elements into the browser DOM."
"What are React Fragments and why are they useful?","Fragments let you group multiple children without adding extra DOM nodes. Use the shorthand <>...</> or <React.Fragment> to avoid unnecessary wrappers."
"What is React Suspense and how do you use it?","Suspense is a component for declaratively handling loading states of lazy-loaded components or data fetching. Wrap lazy components or data-fetching boundaries in <Suspense> with a fallback UI."
"What is an Error Boundary and how do you implement one?","An Error Boundary is a class component that implements static getDerivedStateFromError and componentDidCatch to catch rendering errors in its child tree and display a fallback UI instead of crashing the app."
"What are React Portals and when would you use them?","Portals allow rendering React children into a DOM node outside the parent component hierarchy. They are useful for modals, tooltips, and overlays that need to appear above other content."
"What are React Elements, and how do they differ from components?","React elements are plain objects that describe the UI tree (type, props, children). Components are functions or classes that return elements. React uses elements internally to build the virtual DOM."
"What is the purpose of React.createElement?","React.createElement(type, props, children) creates a React element object. JSX is syntactic sugar that compiles down to createElement calls to instruct React what to render."
"What is server-side rendering (SSR) in React?","SSR is the process of rendering React components on the server into HTML strings and sending that HTML to the client, improving initial load performance and SEO."
"What is hydration in React?","Hydration attaches React event listeners to existing server-rendered HTML. ReactDOM.hydrate or hydrateRoot merges the React tree with the existing markup without replacing it."
"What are PropTypes in React and how do you use them?","PropTypes is a runtime type-checking library for React props. Define Component.propTypes with PropTypes validators to warn in the console when incorrect prop types are passed."
"What are defaultProps and how do they work?","defaultProps allow you to specify default values for props when none are provided. For functional components assign Component.defaultProps = { ... }. For class components define a static defaultProps property."
"What is the React.Children API and how can you use it?","React.Children provides utilities like map, forEach, count, toArray, and only for working with this.props.children, helping you iterate, transform, or validate children elements."
"What is React.cloneElement used for?","cloneElement returns a new element by cloning an existing one and merging in new props and optionally new children. It is useful for injecting props into children."
"What is the contextType property in React?","contextType can be assigned to a class component (static contextType = MyContext) to read the context value via this.context, subscribing to a single context."
"What is the difference between React.lazy and dynamic import?","React.lazy wraps a dynamic import of a component for code splitting and must be used with Suspense. Dynamic import alone returns a promise and cannot be directly rendered without React.lazy."
"What is forwardRef and when would you use it?","forwardRef is a function that lets you forward a ref through a component to one of its children, enabling parent components to access the childâ€™s DOM node or instance methods."
"What is the useImperativeHandle hook used for?","useImperativeHandle is used with forwardRef to customize the instance value exposed to parent refs, controlling which methods or properties are accessible."
"How would you implement route-based code splitting in React?","Use React.lazy to import route components and wrap them in <Suspense fallback> within your routing solution (e.g. React Router), so each route loads its code on demand."
"What is the React Profiler API and how do you use it?","The Profiler component measures rendering performance. Wrap parts of your app in <Profiler id=\"App\" onRender={(id, phase, actualDuration) => {}}> and log render timings to identify performance bottlenecks."