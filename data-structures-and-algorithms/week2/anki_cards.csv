"**Week 2: Longest Substring Without Repeating Characters** - Core Concept","Sliding Window: Use two pointers (`left`, `right`) to define a dynamic window over the sequence. Expand the window by moving `right`, shrink it by moving `left` when a condition (duplicate character) is violated."
"**Week 2: Longest Substring** - JS `Set` Usage","Initialize: `const set = new Set();` <br> Add: `set.add(value);` <br> Check: `set.has(value);` <br> Delete: `set.delete(value);` <br> Purpose: O(1) average time complexity for checking if a character is already in the current window."
"**Week 2: Longest Substring** - Algorithm Pattern (Sliding Window)","1. Initialize `left = 0`, `maxLength = 0`, `charSet = new Set()`. <br> 2. Loop `right` from `0` to `s.length - 1`. <br> 3. **While** `charSet.has(s[right])`: <br>    `charSet.delete(s[left]);` <br>    `left++;` <br> 4. `charSet.add(s[right]);` <br> 5. `maxLength = Math.max(maxLength, right - left + 1);` <br> 6. Return `maxLength`."
"**Week 2: Longest Substring** - Why `while` loop inside `for` loop?","The inner `while` loop ensures the window is shrunk *sufficiently* from the left to remove the *specific* duplicate character that `s[right]` conflicts with, before `s[right]` is added."
"**Week 2: Longest Substring** - Time Complexity","O(n) - Each character is visited at most twice (once by `right`, potentially once by `left`)."
"**Week 2: Longest Substring** - Space Complexity","O(min(m, n)) - Where `n` is string length and `m` is the size of the character set (e.g., 26 for lowercase English). The `Set` stores at most `m` unique characters or `n` characters if `n < m`." 